Пошаговая игра в консольно-текстовом стиле 
"Cavy" ("Пещерка")

============================================================================

Язык(-и) разработки:
	Java.

Средства разработки (с помощью чего делаем):
	СУБД - Hibernate, MySql
	GUI - AsciiPanel
	Сборка - Ant
	IDE - Eclipse
	Протокол взаимодействия клиента и сервера - Java Sockets
	Сериализация и десериализация объектов - Gson
	Логгирование - log4j

Компоненты разработки (обзор того, что делаем):
	Проекты:
		1. Server.
		2. Client.
	Компоненты:
		1. Сервер (Server).
		2. Взаимодействие с базой данных (Server).
		3. Клиент (Client).
		4. Игра (Client).
		5. Графический интерфейс (Client).
	Зависимости между компонентами отображены в файле schm.png.

Технические требования:
	1. Клиентский модуль должен работать со следующими возможностями:
		а) время ответа на нажатия в процессе игры - до 100 мс.
		б) время инициализации игры - не более 3000 мс.
	2. Серверный модуль:
		а) время обработки запроса 	- до 1000 мс при нагрузке 10 запросов/сек.
									- до 5000 мс при нагрузке 50 запросов/сек.
 		б) поддерживаемое число запросов в секунду - 50.
		в) поддерживаемое число записей в базе данных - 100000: 

============================================================================
		
Технический проект (как делаем):
(Ниже описаны только API классов - public-методы.)

	I. SERVER
	
	0. Общие объекты.
		0.1. UserGameInfo {String userName; boolean finished, int level, int hp, int mana,
		int satiety, int attack, int defense, int vision, double hpReg, double manaReg, int experience}.
	
	1. Сервер.
		1.1. Обрабатывает запросы, приходящие от клиента. Типы запросов: сохранить в базе данных
		информацию об завершённой игре.
		1.2. Формат запроса: {типЗапроса(RequestType), длинаТелаЗапроса(long),
		телоЗапроса(строка указанной длины - объект, соответствующий типу запроса в формате json)}
		1.3. Состав компонента:
			a) Перечисление RequestType. Идентифицирует тип запроса.
			а) Класс Server. Принимает запрос и передаёт его обработчику первого уровня (Dispatcher).
			б) Класс Dispatcher implements Runnable. Читает тип запроса, создаёт c помощью ProcessorFactory
			соответствующий обработчик (Processor) и передаёт ему запрос.
			в) Интерфейс Processor. Имеет единственный метод: void process(Client client).
			г) Класс ProcessorFactory. Имеет статический метод:
			Processor getProcessor(RequestType requestType).

	2. Взаимодействие с базой данных.
		2.1. Состав компонента:
			а) Интерфейс DAO. Содержит методы: 	void saveGameInfo(UserGameInfo userGameInfo);
												List<UserGameInfo> getUserGameInfo(String userName);
			b) Класс DAOImpl implements DAO. Содержит реализацию методов интерфейса DAO.
	
	II. CLIENT
	
	0. Общие объекты.
		0.1. UserGameInfo {String userName; boolean finished, int level, int hp, int mana,
		int satiety, int attack, int defense, int vision, double hpReg, double manaReg, int experience}.
	
	3. Клиент.
		3.1. Содержит класс Client, который содержит метод:
		void sendUserGameInfo(UserGameInfo userGameInfo).
	
	4. Игра.
		4.1. Управление:
			а) Класс MainApplication. Имеет статический метод: void main(String[] a);
		4.2. Объекты.
			а) Перечисление Tile {char glyph, Color color, String description} - неактивная ячейка матрицы.
			б) Класс Item. Отображаемый объект: {char glyph, Color color, String name, String appearance, int foodValue, int attackValue, int defenseValue, int thrownAttackValue, int rangedAttackValue }.
			в) Класс Creature. Активный объект: {int x, int y, int z, char glyph, World world, int maxHp, int hp, int attackValue, int defenseValue, int visionRadius, String name, int maxFood, int food, Item weapon, Item armor, int xp, int level, int maxMana, int regenHpCooldown, int regenHpPer1000, int mana, int regenManaCooldown, int regenManaPer1000, String causeOfDeath, Color color}
			г) Расширения класса Creature: конкретные объекты.
		4.3. Мир.
			а) Класс World. Содержит массивы Tile[][][] и Item[][][] и методы для их изменения.
			б) Класс WorldBuilder. Строит объект класса World. Содержит метод: World build(), который вызывается после вызова ряда других методов WorldBuilder, устанавливающих различные характеристики World (паттерн Builder).
	5. Графический интерфейс.
		5.1. Screens.
			а) Интерфейс Screen. Содержит методы 	void displayOutput(AsciiPanel terminal);
													Screen respondToUserInput(KeyEvent key);
			б) Реализации интерфейса Screen. По одной на каждое состояние игры.
